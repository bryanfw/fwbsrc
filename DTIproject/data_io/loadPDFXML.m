%% LOADPDFXML     Load information from a Philips MRI .PDF.XML file
%
% [INFO] = LOADPDFXML(FILENAME)
%
%   FILENAME is a string containing a file prefix or full name of the 
%   .PDF.XML file, e.g. SURVEY_1 or SURVEY_1.PDF.XML data.
%
%   .PDF.XML files are generated by the vuSuperExport tool
%
%   INFO is a structure containing details from the .PDF.XML file
%
% [INFO] = LOADPDFXML([])
%
%   When the passed FILENAME is not provided or is an empty array or empty 
%   string.  The user chooses a file using UIGETFILE.


%% Revision History
% 2011.07.29    initial version - brianwelch

%% Function definition
function [info] = loadXMLREC(filename)

%% Allow user to select a file if input FILENAME is not provided or is empty
if nargin<1 | length(filename)==0,
    [fn, pn] = uigetfile( ...
        {'*.PDF.XML', '.PDF.XML files (*.PDF.XML)'; ...
         '*.*',   'All Files (*.*)'}, ...
         'Select PDFXML file');
    if fn~=0,
        filename = sprintf('%s%s',pn,fn);
    else
        disp('LOADPDFXML cancelled');
        return;
    end
end

%% Parse the filename.
% It may be the .PDF.XML filename or just the filename prefix
% Instead of REGEXP, use REGEXPI which igores case
toks = regexpi(filename,'^(.*?)(\.PDF\.XML)?$','tokens');
prefix = toks{1}{1};
info.pdfxml_filename = sprintf('%s.PDF.XML',prefix);

%% Open XML file and read all text
fid = fopen(info.pdfxml_filename,'r');
if fid~=-1,
    textblob = fread(fid,inf,'uint8=>char')';
    fclose(fid);
else
    error( sprintf('Cannot open %s for reading', info.pdfxml_filename) );
end

%% Turn textblob into separate tokens
% leading whitespace will not be returned
% ending carriage-return, newline (\r\n) will not be returned
% empty lines will not be returned
% individual tokens will be:
% 1. <immediately_closed_tag>contents</immediately_closed_tag>
% 2. <open_tag_with_no_immediate_close>
xml_tokens_as_cells = regexp(textblob,'\s*(<[^>]+>[^<]+<\/[^>]+>)|\s*(<[^>]+>)\s*','tokens');

%% Convert cell array of cell tokens into a cell array of strings
xml_tokens_as_strs = [xml_tokens_as_cells{:}];

%% First cell should contain series_roid inside an xml comment
info.series_roid = char( regexp(xml_tokens_as_strs{1},'series_\d*_\d*','match') );

%% Find start and stop points for PDF_ tags
detected_pdf_open_close_tags = regexp(xml_tokens_as_strs,'<\/?PDF_.*>','start');
found = find(1-cellfun('isempty',detected_pdf_open_close_tags));
pdf_group_opens = found(1:2:end);
pdf_group_closes = found(2:2:end);

%% attribute regular expression tokens: 
% name
% value
% subattribute name(s)
% subattribute value(s)
attribute_name_regexp_token_pattern  = ' Name="([\w ]+)" ';
attribute_value_regexp_token_pattern = '>(.*)<';
attribute_subattribute_name_regexp_token_pattern = ' (\w+)=';
attribute_subattribute_value_regexp_token_pattern = '"([\w ]+)"';

%% Loop over PDF groups
for g=1:length(pdf_group_opens),
    
    pdf_group_name = char( regexp(xml_tokens_as_strs{pdf_group_opens(g)},'PDF_\w*','match') ); 
    
    selected_xml_tokens_as_strs = [xml_tokens_as_cells{(pdf_group_opens(g)+1):(pdf_group_closes(g)-1)}];
    
    name_tokens_as_cells = regexp(selected_xml_tokens_as_strs,attribute_name_regexp_token_pattern,'tokens');
    value_tokens_as_cells = regexp(selected_xml_tokens_as_strs,attribute_value_regexp_token_pattern,'tokens');
    subattribute_name_tokens_as_cells = regexp(selected_xml_tokens_as_strs,attribute_subattribute_name_regexp_token_pattern,'tokens');
    subattribute_value_tokens_as_cells = regexp(selected_xml_tokens_as_strs,attribute_subattribute_value_regexp_token_pattern,'tokens');
    
    for k=1:length(name_tokens_as_cells),
        parent_fieldname = char(regexprep(name_tokens_as_cells{k}{1},'\s*','_'));
        child_fieldnames = [subattribute_name_tokens_as_cells{k}{:}];
        child_values = [subattribute_value_tokens_as_cells{k}{:}];
        
        tmp_struct = cell2struct(child_values,child_fieldnames,2);
        
        switch tmp_struct.Type,
            case {'float','int','enum'}
                info.(pdf_group_name).(parent_fieldname) = str2num( char(value_tokens_as_cells{k}{1}) );
            otherwise,
                info.(pdf_group_name).(parent_fieldname) = char(value_tokens_as_cells{k}{1});
        end
    end

end

