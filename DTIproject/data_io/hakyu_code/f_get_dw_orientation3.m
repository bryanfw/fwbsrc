
function varargout = f_get_dw_orientation3(GENparams,DWIparams,varargin)
%[f_get_dw_orientation3] get diffusion weighting gradient orientation.
%
% USAGE:
%   varargout = f_get_dw_orientation3(GENparams,DWIparams,varargin)
%
% INPUT:
%   GENparams
%   DWIparams
%   varargin : user defined DW orientation vectors, [ndir,3]
%
% OUTPUT:
%   varargout:
%       {1} - vectors in CRP coordinate
%       {2} - vectors in NWV coordinate
%       {3} - vectors in MPS coordinate
%       {4} - vectors in LPH coordinate
%       {5} - vectors in LPHp coordinate
%       {6} - vectors in XYZ coordinate
%
% NOTE:
%   dw_grad is in <default display orientation> for each slice orientation
%
%
% Last modified
% 2010.08.06.
% 2010.10.22.
%   Take care of DWI case in which diffusion gradient orientation is one of
%   M, P, S.
%   Add slice_orientation to input.
% 2010.11.15.
%   Change order and sign of dw_ori_m based on object position and Matlab coordinate.
%   See note #4 page 17.
% 2010.12.09.
%   Add 'number_of_directions' for 'user defined' diffusion gradient
%   orientation.
%   Change 'dw_m' from which it uses GR`diff[0,1,2]:str_factor to which it
%   uses gradient orientations shown in PAR/REC file.
%
% 2011.01.19.
%   Use Philips coordinate relationship,
%       XYZ -> LPH <- L'P'H' <- NWV <- MPS
%   here, LPH is diff orientation in PAR file and NWV is actual image-space
%   coordinate of diff orientation. Then LPH (actually P,H,L order in PAR
%   file) must be transformed to NWV, and NWV must be re-ordered for CRP
%   (column, row, page) coordinate for tensor calculation in Matlab. When CRP
%   diff orientation is used, DW images must be in default display
%   orientation. This is shown in E4p40. This is tested in
%   [test_diffusion_gradient_coordinate.m].
% 2011.01.24.
%   Use [f_coord_tform.m] for generating all the other coordinates.
% 2011.01.31.
%   Add B0 as another input.
% 2011.06.20.
%   This is generated from [f_get_dw_orientation.m].
%   Take input as GENparams and DWIparams and include 'gradient overplus'
%   option.
% 2011.07.29.
%   Change dw_low for 3T.
% 2012.04.04.
%   Use coilID to accomodate all different diffusion gradient orientations.
% 2012.06.16.
%   Take varargin as input for user_defined_dw_ori, e.g., [1 0 0; 0 1 0].
%
% Ha-Kyu



%% Parse input struct
B0 = GENparams.B0;
coilID = GENparams.coilID;
patient_orientation = GENparams.patient_orientation;
patient_position = GENparams.patient_position;
directional_resolution = DWIparams.directional_resolution;
Ang = DWIparams.Ang;
fold_over_dir = DWIparams.fold_over_dir;
fat_shift_dir = DWIparams.fat_shift_dir;
slice_orientation = DWIparams.slice_orientation;
if isfield(DWIparams,'number_of_directions')
    number_of_directions = DWIparams.number_of_directions;
end
if isfield(DWIparams,'gradient_overplus')
    gradient_overplus = DWIparams.gradient_overplus;
end
if  strcmpi(directional_resolution,'low') || ...
        strcmpi(directional_resolution,'medium') || ...
        strcmpi(directional_resolution,'high')
    flag__philips_directional_resolution = 1;
else
    flag__philips_directional_resolution = 0;
end



%% Define default diffusion gradient orientations

% These vectors are as shown in .PAR file such as,
%   [a,b,c] = [AP,FH,RL] = PHL coordinate system, see E4p40.

if B0 == 70000
    if strcmpi(gradient_overplus,'no') && (flag__philips_directional_resolution==1)
        
        % Directional resolution: low
        dw_low = [0 0 -1; ...
            -1 0 0; ...
            0 1 0; ...
            0.088 -0.704 0.704; ...
            -0.704 0.088 -0.704; ...
            -0.704 0.704 -0.088]';        
        % Directional resolution: medium
        dw_medium = [0 0 -1; ...
            -1 0 0; ...
            0 1 0; ...
            0.111   -0.978    0.179; ...
            0.377   -0.924    0.064; ...
            -0.052   -0.701   -0.710; ...
            0.438   -0.651   -0.619; ...
            -0.784   -0.571   -0.242; ...
            0.618   -0.742    0.259; ...
            -0.170   -0.551    0.817; ...
            -0.526   -0.106    0.844; ...
            -0.955   -0.139    0.263; ...
            -0.969    0.248   -0.000; ...
            -0.666    0.024   -0.745; ...
            -0.232    0.021   -0.973]';        
        % Directional resolution: high
        dw_high = [0.000    0.000   -1.000; ...
            -1.000    0.000    0.000; ...
            0.000    1.000    0.000; ...
            0.115   -0.993    0.042; ...
            0.200   -0.964   -0.175; ...
            0.163   -0.959   -0.232; ...
            -0.026   -0.930   -0.368; ...
            -0.374   -0.908   -0.190; ...
            -0.833   -0.540    0.117; ...
            -0.253   -0.947    0.200; ...
            -0.134   -0.858    0.496; ...
            0.628   -0.778    0.014; ...
            0.148   -0.651    0.744; ...
            -0.320   -0.564    0.761; ...
            -0.925   -0.335    0.181; ...
            0.422   -0.600    0.680; ...
            -0.471   -0.418   -0.777; ...
            0.104   -0.368   -0.924; ...
            0.767   -0.438   -0.468; ...
            0.189   -0.432   -0.882; ...
            -0.706   -0.157   -0.690; ...
            -0.757   -0.608   -0.239; ...
            -0.984    0.170    0.058; ...
            -0.836   -0.113    0.537; ...
            0.121   -0.042    0.992; ...
            -0.071   -0.038    0.997; ...
            -0.478   -0.101    0.872; ...
            -0.933    0.258    0.249; ...
            -0.992   -0.047   -0.118; ...
            -0.841    0.422   -0.338; ...
            -0.841    0.116   -0.529; ...
            -0.055   -0.057   -0.997]';
        
    elseif strcmpi(gradient_overplus,'yes') && (flag__philips_directional_resolution==1)
        
        % Directional resolution: low
        dw_low = [-0.667   -0.667   -0.333;...
            -0.333    0.667   -0.667;...
            -0.667    0.333    0.667;...
            -0.707   -0.000   -0.707;...
            -0.707    0.707   -0.000;...
            -0.000    0.707    0.707];        
        % Directional resolution: medium
        dw_medium = [-0.5000   -0.7070   -0.5000; ...
            -0.5000    0.7070   -0.5000; ...
            -0.7070         0    0.7070; ...
            -0.7070   -0.6990   -0.1100; ...
            -0.7000   -0.6530    0.2890; ...
            -0.3310   -0.7050    0.6270; ...
            -0.2730   -0.7020    0.6570; ...
            -0.5420   -0.5040   -0.6730; ...
            -0.4910    0.5130    0.7040; ...
            -0.2530    0.6750   -0.6930; ...
            -0.7070    0.0280   -0.7070; ...
            -0.7070    0.6480   -0.2820; ...
            -0.7020    0.6510    0.2890; ...
            -0.7060    0.0540    0.7060; ...
            -0.2050    0.6830    0.7010];
        
    elseif strcmpi(gradient_overplus,'no') && (flag__philips_directional_resolution==0) % M,P,S
        % do nothing
    end
    
    
elseif B0 == 30000
    
    if strcmpi(gradient_overplus,'no') && (flag__philips_directional_resolution==1)
        
        % Directional resolution: low
        %     dw_low = [0.070   -0.998    0.000; ...
        %         -0.026   -0.002   -1.000; ...
        %         0.997    0.070   -0.026; ...
        %         -0.749    0.654    0.107; ...
        %         0.119   -0.698   -0.706; ...
        %         0.690   -0.040   -0.723];        
        %     dw_low = [ 0   -1.0000         0; ...
        %         0.0010         0   -1.0000; ...
        %         1.0000         0    0.0010; ...
        %         -0.7040    0.7040    0.0870; ...
        %         0.0890   -0.7040   -0.7040; ...
        %         0.7050   -0.0880   -0.7040]; % 2011.06.20.        
        dw_low = [ 1   0         0; ...
            0.0010         0   -1.0000; ...
            0.0000         1    0.0000; ...
            -0.7040    -0.7040    0.088; ...
            0.704    0.088   -0.704; ...
            0.088    0.704   -0.704]; % 2011.07.29.        
        % Directional resolution: medium
        %     dw_medium = [0.000   -1.000    0.030; ...
        %         -0.022   -0.030   -0.999; ...
        %         1.000   -0.001   -0.022; ...
        %         -0.975    0.183    0.127; ...
        %         -0.932    0.053   -0.358; ...
        %         -0.702   -0.711   -0.015; ...
        %         -0.642   -0.605    0.471; ...
        %         -0.588   -0.266   -0.764; ...
        %         -0.729    0.278    0.626; ...
        %         -0.555    0.812   -0.182; ...
        %         -0.117    0.827   -0.549; ...
        %         -0.160    0.234   -0.959; ...
        %         0.226   -0.030   -0.974; ...
        %         0.010   -0.765   -0.644; ...
        %         0.016   -0.979   -0.202];        
        dw_medium = [0.0060   -1.0000    0.0270; ...
            0.0850   -0.0270   -0.9960; ...
            0.9960    0.0080    0.0850; ...
            -0.9850    0.1740    0.0230; ...
            -0.8890    0.0460   -0.4560; ...
            -0.6900   -0.7170   -0.0920; ...
            -0.6830   -0.6130    0.3980; ...
            -0.5000   -0.2680   -0.8230; ...
            -0.7940    0.2690    0.5450; ...
            -0.5400    0.8070   -0.2380; ...
            -0.0660    0.8290   -0.5560; ...
            -0.0580    0.2360   -0.9700; ...
            0.3300   -0.0240   -0.9440; ...
            0.0860   -0.7630   -0.6410; ...
            0.0460   -0.9780   -0.2020]; % 2011.06.20.
        
        if strcmpi(coilID,'SENSE-NV-16')
            dw_low = [1.000    0.000    0.000; ...
                0.000    0.000   -1.000; ...
                0.000    1.000    0.000; ...
                -0.704   -0.704    0.088; ...
                0.704    0.088   -0.704; ...
                0.088    0.704   -0.704];            
            dw_medium = [1.000    0.000    0.000; ...
                0.000    0.000   -1.000; ...
                0.000    1.000    0.000; ...
                -0.179   -0.978    0.111; ...
                -0.064   -0.924   -0.377; ...
                0.710   -0.701   -0.052; ...
                0.619   -0.651    0.438; ...
                0.242   -0.571   -0.784; ...
                -0.259   -0.742    0.618; ...
                -0.817   -0.551   -0.170; ...
                -0.844   -0.106   -0.526; ...
                -0.263   -0.139   -0.955; ...
                0.000    0.248   -0.969; ...
                0.745    0.024   -0.666; ...
                0.973    0.021   -0.232];
        end
        
    elseif strcmpi(gradient_overplus,'yes') && (flag__philips_directional_resolution==1)
        
        % Directional resolution: low
        dw_low = [-0.667   -0.667   -0.333;...
            -0.333    0.667   -0.667; ...
            -0.667    0.333    0.667; ...
            -0.707   -0.000   -0.707; ...
            -0.707    0.707   -0.000; ...
            -0.000    0.707    0.707];        
        % Directional resolution: medium
        dw_medium = [-0.5000   -0.7070   -0.5000; ...
            -0.5000    0.7070   -0.5000; ...
            -0.7070         0    0.7070; ...
            -0.7070   -0.6990   -0.1100; ...
            -0.7000   -0.6530    0.2890; ...
            -0.3310   -0.7050    0.6270; ...
            -0.2730   -0.7020    0.6570; ...
            -0.5420   -0.5040   -0.6730; ...
            -0.4910    0.5130    0.7040; ...
            -0.2530    0.6750   -0.6930; ...
            -0.7070    0.0280   -0.7070; ...
            -0.7070    0.6480   -0.2820; ...
            -0.7020    0.6510    0.2890; ...
            -0.7060    0.0540    0.7060; ...
            -0.2050    0.6830    0.7010];
        
        if strcmpi(coilID,'SENSE-NV-16')
            dw_low = [-0.667   -0.667   -0.333; ...
                -0.333    0.667   -0.667; ...
                -0.667    0.333    0.667; ...
                -0.707    0.000   -0.707; ...
                -0.707    0.707    0.000; ...
                0.000    0.707    0.707];
            dw_medium = [-0.500   -0.707   -0.500; ...
                -0.500    0.707   -0.500; ...
                -0.707    0.000    0.707; ...
                -0.707   -0.699   -0.110; ...
                -0.700   -0.653    0.289; ...
                -0.331   -0.705    0.627; ...
                -0.273   -0.702    0.657; ...
                -0.542   -0.504   -0.673; ...
                -0.491    0.513    0.704; ...
                -0.253    0.675   -0.693; ...
                -0.707    0.028   -0.707; ...
                -0.707    0.648   -0.282; ...
                -0.702    0.651    0.289; ...
                -0.706    0.054    0.706; ...
                -0.205    0.683    0.701];
        end
                
        
    elseif strcmpi(gradient_overplus,'no') && (flag__philips_directional_resolution==0) % M,P,S
        
    end
    
else
    error('f_get_dw_orientation:main','Unknown B0')
end

% DWI: M
dw_M = [0.000 0.000 -1.000]';

% DWI: P
dw_P = [-1.000 0.000 0.000]';

% DWI: S
dw_S = [0.000 1.000 0.000]';




%% PHL (in PAR file) orientation
if strcmpi(directional_resolution,'low')
    
    % PHL:[AP,FH,RL]
    PHL = dw_low;
    
elseif strcmpi(directional_resolution,'medium')
    
    % PHL:[AP,FH,RL]
    PHL = dw_medium;
    
elseif strcmpi(directional_resolution,'high')
    
    % PHL:[AP,FH,RL]
    PHL = dw_high;
    
elseif strcmpi(directional_resolution(regexp(directional_resolution,'[MPS]')),'P')
    
    % PHL:[AP,FH,RL]
    PHL = dw_P';
    
elseif strcmpi(directional_resolution(regexp(directional_resolution,'[MPS]')),'M')
    
    % PHL:[AP,FH,RL]
    PHL = dw_M';
    
elseif strcmpi(directional_resolution(regexp(directional_resolution,'[MPS]')),'S')
    
    % PHL:[AP,FH,RL]
    PHL = dw_S';
    
elseif strcmpi(directional_resolution(regexp(directional_resolution,'[MPS]')),'MP')
    
    % PHL:[AP,FH,RL]
    PHL = [dw_M'; dw_P'];
    
elseif strcmpi(directional_resolution(regexp(directional_resolution,'[MPS]')),'MS')
    
    % PHL:[AP,FH,RL]
    PHL = [dw_M'; dw_S'];
    
elseif strcmpi(directional_resolution(regexp(directional_resolution,'[MPS]')),'PS')
    
    % PHL:[AP,FH,RL]
    PHL = [dw_P'; dw_S'];
    
elseif strcmpi(directional_resolution,'user defined')
    
    user_defined = varargin{1};
    PHL = user_defined;
%     if user_defined == 12
%         % PHL:[AP,FH,RL]
%         PHL = [dw_low, -dw_low];
%     else
%         error('f_get_dw_orientation:main', ...
%             'User defined number of directions must be 12')
%     end
    if user_defined == 12
        % PHL:[AP,FH,RL]
        PHL = [dw_low, -dw_low];
    end
    
else
    error('f_get_dw_orientation:main','Unknown directional_resolution.')
end



%% Transform PHL to others
[CRP,NWV,MPS,LPH,LPHp,XYZ] = f_coord_tform(PHL, Ang, ...
    fold_over_dir, fat_shift_dir, slice_orientation, ...
    patient_orientation, patient_position);



%% Final diffusion gradient orientation
switch nargout
    case 1
        varargout{1} = CRP;
    case 2
        varargout{1} = CRP;
        varargout{2} = NWV;
    case 3
        varargout{1} = CRP;
        varargout{2} = NWV;
        varargout{3} = MPS;
    case 4
        varargout{1} = CRP;
        varargout{2} = NWV;
        varargout{3} = MPS;
        varargout{4} = LPH;
    case 5
        varargout{1} = CRP;
        varargout{2} = NWV;
        varargout{3} = MPS;
        varargout{4} = LPH;
        varargout{5} = LPHp;
    case 6
        varargout{1} = CRP;
        varargout{2} = NWV;
        varargout{3} = MPS;
        varargout{4} = LPH;
        varargout{5} = LPHp;
        varargout{6} = XYZ;
    otherwise
        error('f_get_dw_orientation:main','Unknown number of output')
end






return






%% END


























